# format1, format2, command, command_args
converters = [
    # images
    ("png",  "ico",   "convert",     '"$1" -resize 256x256 "$output"'),
    ("png",  "jpg",   "convert",     '"$1" "$output"'),
    ("jpg",  "png",   "convert",     '"$1" "$output"'),
    ("webp", "png",   "dwebp",       '"$1" -o "$output"'),
    # text/docs
    ("pdf",  "png",   "pdftoppm",    '-png "$1" "$output"'),
    ("pdf",  "jpg",   "convert",     '-density 300 "$1" -quality 100 "$output"'),
    ("pdf",  "word",  "pdftotext",   '"$1" "$output"'),
    ("md",   "pdf",   "pandoc",      '"$1" -o "$output"'),
    ("md",   "html",  "pandoc",      '"$1" -o "$output"'),
    ("docx", "pdf",   "pandoc",      '-s "$1" -o "$output"'),
    ("txt",  "pdf",   "enscript",    '-p - "$1" | ps2pdf - "$output"'),
    ("html", "pdf",   "wkhtmltopdf", '"$1" "$output"'),
    # video
    ("mp4",  "mp3",   "ffmpeg",      '-i "$1" -q:a 0 -map a "$output"'),
    ("gif",  "mp4",   "ffmpeg",      '-f gif -i "$1" "$output"'),
    ("mp4",  "gif",   "ffmpeg",      '-i "$1" "$output.gif"'),
    # audio
    ("flac", "mp3",   "ffmpeg",      '-i "$1" -ab 320k "$output"'),
    ("flac", "wav",   "ffmpeg",      '-i "$1" "$output"'),
    ("mp3",  "wav",   "ffmpeg",      '-i "$1" "$output"'),
    ("wav",  "mp3",   "ffmpeg",      '-i "$1" -ab 192k "$output"'),
]

script_begin = """#!/bin/bash
# Generated by shell_converters_generator.py: https://github.com/Roman-/shell-file-converters

# Function to display Usage
_sfc_usage() {
    echo "Usage: $1 <input_filename> [output_filename]"
}

# Check for command availability
_sfc_check_command() {
    if ! command -v $1 &> /dev/null; then
        echo "$1 could not be found, please install the necessary package(s) first."
        return 1
    fi
}

# Confirm overwriting existing file, if any
_sfc_confirm() {
    if [ -f "$1" ]; then
        while true; do
            echo -n "File $1 exists. Do you want to overwrite it? (y/n) "
            read -r answer
            case $answer in
                [Yy]* ) break;; # proceeding
                [Nn]* ) echo "Operation aborted."; return 1;;
                * ) echo "Please answer yes (y) or no (n).";;
            esac
        done
    fi
}
"""

"""
typical bash function generated:
png2jpg() {
    [ $# -ge 1 ] || { _sfc_usage "png2jpg"; return 1; }
    _sfc_check_command convert || return 1
    local output=${2:-${1%.png}.jpg}
    _sfc_confirm "$output" || return 1
    convert "$1" "$output"
}
"""
print(script_begin)
for format1, format2, command, args in converters:
    print(f"{format1}2{format2}() {{")
    print(f'    [ $# -ge 1 ] || {{ _sfc_usage "{format1}2{format2}"; return 1; }}')
    print(f'    _sfc_check_command {command} || return 1')
    print(f'    local output=${{2:-${{1%.{format1}}}.{format2}}}')
    print(f'    _sfc_confirm "$output" || return 1')
    print(f'    {command} {args}')
    print(f'}}\n')

